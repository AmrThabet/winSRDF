
#include "stdafx.h"
#include "../../../SRDF.h"

using namespace Security::Targets::Files;
using namespace Security::Targets::Packets;

char* PrintMAC(char* sMAC)
{
  char buf[255] = {0};
  unsigned char* MAC = (unsigned char*)sMAC;
  sprintf(buf,"%02x:%02x:%02x:%02x:%02x",MAC[0],MAC[1],MAC[2],MAC[3],MAC[4]);
  return buf;
}

char* PrintIP(UINT nIP)
{
	char buf[255] = {0};
	unsigned char* IP = (unsigned char*)&nIP;
	sprintf(buf,"%d.%d.%d.%d",IP[0],IP[1],IP[2],IP[3]);
	return buf;
}

int _tmain(int argc, _TCHAR* argv[])
{
	printf(	"\n +----------------------------------------------------+\n"
			" +               Packetyzer Unit Tests                +\n"
			" +----------------------------------------------------+\n\n");

	cPacket* TestPacket = NULL;
	printf(	" [*] Single Packets:\n" " -------------------\n");

	UCHAR ARP[42] = {		0x28,0x10,0x7b,0x34,0xf7,0xd6,0x68,0x5d,0x43,0x54,0x96,0xe7,0x08,
						0x06,0x00,0x01,0x08,0x00,0x06,0x04,0x00,0x02,0x68,0x5d,0x43,0x54,
						0x96,0xe7,0x0a,0x00,0x00,0x04,0x28,0x10,0x7b,0x34,0xf7,0xd6,0x0a,
						0x00,0x00,0x01 };

	TestPacket = new cPacket((UCHAR*)ARP, sizeof(ARP));
	printf(" [+] Testing ARP Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->isARPPacket ? "OK":"FAILED");
	cout << "\t - Source MAC: " << PrintMAC((char*)TestPacket->EthernetHeader->SourceHost) << "\n";
	cout << "\t - Destination MAC: " << PrintMAC((char*)TestPacket->EthernetHeader->DestinationHost) << "\n";
	cout << "\n";
	delete(TestPacket);

	UCHAR ICMP[] = {	0x28,0x10,0x7b,0x34,0xf7,0xd6,0x68,0x5d,0x43,0x54,0x96,0xe7,0x08,
						0x00,0x45,0x00,0x00,0x3c,0x60,0xaf,0x00,0x00,0x80,0x01,0x67,0xcb,
						0x0a,0x00,0x00,0x04,0x41,0x37,0x27,0x0c,0x08,0x00,0x4d,0x5a,0x00,
						0x01,0x00,0x01,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,
						0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
						0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69 };

	TestPacket = new cPacket((UCHAR*)ICMP, sizeof(ICMP));
	printf(" [+] Testing ICMP Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->isICMPPacket ? "OK":"FAILED");
	cout << "\t - Source IP: " << PrintIP(TestPacket->IPHeader->SourceAddress) << "\n";
	cout << "\t - Destination IP: " << PrintIP(TestPacket->IPHeader->DestinationAddress) << "\n";
	cout << "\t - Source MAC: " << PrintMAC((char*)TestPacket->EthernetHeader->SourceHost) << "\n";
	cout << "\t - Destination MAC: " << PrintMAC((char*)TestPacket->EthernetHeader->DestinationHost) << "\n";
	cout << "\t - ICMP Packet Type: " << (int)TestPacket->ICMPHeader->Type << "\n";
	cout << "\n";
	delete(TestPacket);

	UCHAR IGMP[] = {	0x01,0x00,0x5e,0x7f,0xff,0xfa,0x00,0x15,0x58,0xdc,0xa8,0x4d,0x08,
						0x00,0x46,0x00,0x00,0x20,0x0e,0x47,0x00,0x00,0x01,0x02,0x1a,0x54,
						0x0a,0x3c,0x02,0x07,0xef,0xff,0xff,0xfa,0x94,0x04,0x00,0x00,0x16,
						0x00,0xfa,0x04,0xef,0xff,0xff,0xfa,0x00,0x00,0x00,0x00,0x00,0x00,
						0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

	TestPacket = new cPacket((UCHAR*)IGMP, sizeof(IGMP));
	printf(" [+] Testing IGMP Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->isIGMPPacket ? "OK":"FAILED");
	delete(TestPacket);

	CHAR UDP[] = {		0x00,0xc0,0x9f,0x32,0x41,0x8c,0x00,0xe0,0x18,0xb1,0x0c,0xad,0x08,
						0x00,0x45,0x00,0x00,0x38,0x00,0x00,0x40,0x00,0x40,0x11,0x65,0x47,
						0xc0,0xa8,0xaa,0x08,0xc0,0xa8,0xaa,0x14,0x80,0x1b,0x00,0x35,0x00,
						0x24,0x9e,0xb0,0xf7,0x6f,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
						0x00,0x00,0x06,0x67,0x6f,0x6f,0x67,0x6c,0x65,0x03,0x63,0x6f,0x6d,
						0x00,0x00,0x0f,0x00,0x01};

	TestPacket = new cPacket((UCHAR*)UDP, sizeof(UDP));
	printf(" [+] Testing UDP Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->isUDPPacket ? "OK":"FAILED");
	cout << "\t - Source IP: " << PrintIP(TestPacket->IPHeader->SourceAddress) << "\n";
	cout << "\t - Destination IP: " << PrintIP(TestPacket->IPHeader->DestinationAddress) << "\n";
	cout << "\t - Source Port: " << ntohs(TestPacket->UDPHeader->SourcePort) << "\n";
	cout << "\t - Destination Port: " << ntohs(TestPacket->UDPHeader->DestinationPort) << "\n";
	cout << "\n";
	delete(TestPacket);

	UCHAR IP[] = {		0x28,0x10,0x7b,0x34,0xf7,0xd6,0x68,0x5d,0x43,0x54,0x96,0xe7,0x08,
						0x00,0x45,0x00,0x00,0x34,0x2e,0xfb,0x40,0x00,0x80,0x06,0xc2,0x5e,
						0x0a,0x00,0x00,0x04,0xad,0xc0,0x51,0xa6,0xea,0x94,0x00,0x50,0xd9,
						0x07,0xa1,0xcb,0x00,0x00,0x00,0x00,0x80,0x02,0x20,0x00,0xdf,0xf3,
						0x00,0x00,0x02,0x04,0x05,0xb4,0x01,0x03,0x03,0x02,0x01,0x01,0x04,
						0x02 };

	TestPacket = new cPacket((UCHAR*)IP, sizeof(IP));
	printf(" [+] Testing IP Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->isIPPacket ? "OK":"FAILED");
	delete(TestPacket);

	CHAR TCP[] = {		0x28,0x10,0x7b,0x34,0xf7,0xd6,0x68,0x5d,0x43,0x54,0x96,0xe7,0x08,
						0x00,0x45,0x00,0x00,0x34,0x2e,0xfb,0x40,0x00,0x80,0x06,0xc2,0x5e,
						0x0a,0x00,0x00,0x04,0xad,0xc0,0x51,0xa6,0xea,0x94,0x00,0x50,0xd9,
						0x07,0xa1,0xcb,0x00,0x00,0x00,0x00,0x80,0x02,0x20,0x00,0xdf,0xf3,
						0x00,0x00,0x02,0x04,0x05,0xb4,0x01,0x03,0x03,0x02,0x01,0x01,0x04,
						0x02 };

	TestPacket = new cPacket((UCHAR*)TCP, sizeof(TCP));
	printf(" [+] Testing TCP Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->isTCPPacket ? "OK":"FAILED");
	cout << "\t - Source IP: " << PrintIP(TestPacket->IPHeader->SourceAddress) << "\n";
	cout << "\t - Destination IP: " << PrintIP(TestPacket->IPHeader->DestinationAddress) << "\n";
	cout << "\t - Source Port: " << ntohs(TestPacket->TCPHeader->SourcePort) << "\n";
	cout << "\t - Destination Port: " << ntohs(TestPacket->TCPHeader->DestinationPort) << "\n";
	cout << "\n";
	delete(TestPacket);

	UCHAR SLL_IP[] = {	0x00,0x00,0x03,0x04,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
						0x00,0x08,0x00,0x45,0x00,0x00,0x47,0x62,0x4c,0x40,0x00,0x40,0x11,
						0xda,0x57,0x7f,0x00,0x00,0x01,0x7f,0x00,0x00,0x01,0xce,0x47,0x00,
						0x35,0x00,0x33,0xfe,0x46,0x5a,0x80,0x01,0x00,0x00,0x01,0x00,0x00,
						0x00,0x00,0x00,0x00,0x05,0x65,0x6e,0x2d,0x75,0x73,0x07,0x66,0x78,
						0x66,0x65,0x65,0x64,0x73,0x07,0x6d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,
						0x03,0x63,0x6f,0x6d,0x00,0x00,0x01,0x00,0x01	};

	TestPacket = new cPacket((UCHAR*)SLL_IP, sizeof(SLL_IP), NULL, LINKTYPE_LINUX_SLL);
	printf(" [+] Testing SLL Packet of size %d \t%s\n", TestPacket->PacketSize, TestPacket->hasSLLHeader ? "OK":"FAILED");
	delete(TestPacket);


	ULONGLONG begin = GetTickCount64(); 
	cPcapFile* TestFile = new cPcapFile("H:\\Github\\Packetyzer\\Debug\\example.pcap");
	printf(	"\n [*] Packets in pcap file:  (%s)\n" " -------------------------\n", 
			TestFile->FileLoaded? TestFile->Filename:"FILE NOT LOADED");

	printf(	" [+] Filesize %d\n" " [+] %d Packets are parsed\n"	" [+] %d Conversations are stacked\n",		
			TestFile->FileLength, TestFile->nPackets, TestFile->Traffic->nConnections);

	ULONGLONG end = GetTickCount64();
	printf(" [+] %d packets loaded in %lld millisecond(s)\n", TestFile->nPackets, end-begin);


	UCHAR buffer[] = {
		0x00,0x1c,0xc0,0xe6,0xa2,0xab,0x00,0x24,0x2b,0x32,0xc3,0x55,0x08,0x00,
		0x45,0x00,0x00,0x34,0xc5,0x47,0x40,0x00,0x40,0x06,/*0x61*/ 0x55,0x6a,0x0a,0x00,
		0x00,0x09,0x0a,0x00,0x00,0x0a,0x90,0x1b,0x0d,0x3d,0x15,0x94,0x78,0x2a,
		0x01,0xd5,0x41,0x7d,0x80,0x10,0x08,0xa5,/*0xd6*/ 0x44,0x23,0x00,0x00,0x01,0x01,
		0x08,0x0a,0x00,0x34,0xb5,0x6d,0x00,0xe3,0x5e,0xf4 
	};

	cWinpcapSend send;
	if (send.isReady)
	{
		cout << "\n [*] cWinpcapSend is initialised" << endl;

		cPacket tmp((UCHAR*)buffer, sizeof(buffer));
		if (send.SendPacket(3, &tmp)) 
			cout << " [+] Packet of size " << sizeof(buffer) << " bytes is sent" << endl;
		else
			cout << " [x] Packet is not sent" << endl;
	}

	cWinpcapCapture capture;
	if (capture.isReady) 
	{
		cout << "\n [*] cWinpcapCapture is initialised" << endl;

		cout << "\n [*] Available Network Adapters:\n" << 
			" -------------------------------" << endl;
		for (UINT i=0; i< capture.nAdapters; i++)
		{
			cout << " [+] " << capture.Adapters[i].Name << endl;
			cout << "     " << capture.Adapters[i].ID << endl;
		}


	}

	cPacketGen PG(GENERATE_TCP);
	cout << "\n [*] cPacketGen is initialised" << endl;

	PG.SetMACAddress("00:1d:60:b3:01:84","00:26:62:2f:47:87");
	PG.SetIPAddress("192.168.1.104","174.143.213.184");
	PG.SetPorts(57678, 80);

	UCHAR options[11] = { 0x01,0x01,0x08,0x0a,0x00,0xd4,0x6d,0xde,0x00,0xa3,0x31,/*0xae*/ };
	UCHAR data[10] = "Test Case";

	if (PG.CustomizeTCP((UCHAR*)options, sizeof(options), data, sizeof(data), TCP_SYN))
		cout << " [+] TCP Packet is ready"  << endl;
	if (PG.CustomizeUDP(data, sizeof(data)))
		cout << " [+] UDP Packet is ready"  << endl;
	if (PG.CustomizeICMP(3,0,data, sizeof(data)))
		cout << " [+] ICMP Packet is ready"  << endl;

	cout << "     ";
	for (UINT i=0; i< PG.GeneratedPacketSize; i++) {
		printf("%02x ", PG.GeneratedPacket[i]);
		if ((i+1)%16 ==  0 && i != 0)
			cout << endl << "     ";
	}
	cout << endl;
	
	system("PAUSE"); 
	return 0;
}

